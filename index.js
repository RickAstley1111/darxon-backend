const express = require('express');
const cors = require('cors');
const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

let employees = [
  {
    id: 1,
    name: 'Boss',
    role: 'admin',
    status: 'present',
    tasks: [],
    messages: [],
    children: []
  }
];

// üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function findEmployeeById(tree, id) {
  for (const emp of tree) {
    if (emp.id === id) return emp;
    if (emp.children) {
      const found = findEmployeeById(emp.children, id);
      if (found) return found;
    }
  }
  return null;
}

// üîÅ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function deleteEmployeeById(tree, id) {
  for (let i = 0; i < tree.length; i++) {
    if (tree[i].id === id) {
      tree.splice(i, 1);
      return true;
    }
    if (tree[i].children) {
      const deleted = deleteEmployeeById(tree[i].children, id);
      if (deleted) return true;
    }
  }
  return false;
}

// üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ—Å—Ç–∏
function isChildOf(target, parentId) {
  const parent = findEmployeeById(employees, parentId);
  if (!parent) return false;

  return parent.children?.some(child =>
    child.id === target.id || isChildOf(child, target.id)
  );
}

// üì• –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.post('/employees', (req, res) => {
  const { name, role, parentId } = req.body;
  if (!name) return res.status(400).json({ error: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });

  const newEmp = {
    id: Date.now(),
    name,
    role: role || 'employee',
    status: 'absent',
    tasks: [],
    messages: [],
    children: []
  };

  if (!parentId) {
    employees.push(newEmp);
  } else {
    const parent = findEmployeeById(employees, parentId);
    if (!parent) return res.status(404).json({ error: '–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    parent.children.push(newEmp);
  }

  res.status(201).json(newEmp);
});

// üîÅ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–µ—Ä–µ–≤–æ)
app.get('/employees', (req, res) => {
  res.json(employees);
});

// üîÅ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ ID
app.get('/employees/:id', (req, res) => {
  const id = Number(req.params.id);
  const emp = findEmployeeById(employees, id);
  if (!emp) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  res.json(emp);
});

// üõ† –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–º—è, —Å—Ç–∞—Ç—É—Å, —Ä–æ–ª—å)
app.put('/employees/:id', (req, res) => {
  const emp = findEmployeeById(employees, Number(req.params.id));
  if (!emp) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

  const { name, status, role } = req.body;
  if (name !== undefined) emp.name = name;
  if (status !== undefined) emp.status = status;
  if (role !== undefined) emp.role = role;

  res.json({ message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω', employee: emp });
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
app.delete('/employees/:id', (req, res) => {
  const id = Number(req.params.id);
  const success = deleteEmployeeById(employees, id);
  if (!success) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  res.json({ message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω' });
});

// ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
app.post('/employees/:id/tasks', (req, res) => {
  const emp = findEmployeeById(employees, Number(req.params.id));
  const { task } = req.body;
  if (!emp) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

  emp.tasks.push({ text: task, done: false });
  res.json(emp.tasks);
});

// ‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
app.put('/employees/:id/tasks/:index', (req, res) => {
  const emp = findEmployeeById(employees, Number(req.params.id));
  const index = Number(req.params.index);
  if (!emp || !emp.tasks[index])
    return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });

  emp.tasks[index].done = !!req.body.done;
  res.json(emp.tasks[index]);
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
app.delete('/employees/:id/tasks/:index', (req, res) => {
  const emp = findEmployeeById(employees, Number(req.params.id));
  const index = Number(req.params.index);
  if (!emp || !emp.tasks[index])
    return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });

  emp.tasks.splice(index, 1);
  res.json(emp.tasks);
});

// ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/employees/:id/message', (req, res) => {
  const toEmp = findEmployeeById(employees, Number(req.params.id));
  const fromEmp = findEmployeeById(employees, req.body.fromId);
  if (!toEmp || !fromEmp) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

  const canSend =
    fromEmp.id === 1 || // Boss
    isChildOf(toEmp, fromEmp.id); // –ü—Ä—è–º–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å

  if (!canSend) return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É' });

  toEmp.messages.push({ from: fromEmp.id, text: req.body.text });
  res.json({ message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
});

// üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/employees/:id/messages', (req, res) => {
  const emp = findEmployeeById(employees, Number(req.params.id));
  if (!emp) return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  res.json(emp.messages);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
